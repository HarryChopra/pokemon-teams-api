// Code generated by sqlc. DO NOT EDIT.
// source: pokemon.sql

package db

import (
	"context"
)

const createPokemon = `-- name: CreatePokemon :one
INSERT INTO pokemons(species, nickname, trainer_id)
VALUES ($1, $2, $3)
RETURNING id, trainer_id, species, nickname, created_at
`

type CreatePokemonParams struct {
	Species   string `json:"species"`
	Nickname  string `json:"nickname"`
	TrainerID int32  `json:"trainer_id"`
}

func (q *Queries) CreatePokemon(ctx context.Context, arg CreatePokemonParams) (Pokemon, error) {
	row := q.db.QueryRowContext(ctx, createPokemon, arg.Species, arg.Nickname, arg.TrainerID)
	var i Pokemon
	err := row.Scan(
		&i.ID,
		&i.TrainerID,
		&i.Species,
		&i.Nickname,
		&i.CreatedAt,
	)
	return i, err
}

const deletePokemon = `-- name: DeletePokemon :exec
DELETE FROM pokemons
WHERE id = $1
`

func (q *Queries) DeletePokemon(ctx context.Context, id int32) error {
	_, err := q.db.ExecContext(ctx, deletePokemon, id)
	return err
}

const listPokemons = `-- name: ListPokemons :many
SELECT id, trainer_id, species, nickname, created_at FROM pokemons
WHERE trainer_id = $1
ORDER BY created_at ASC
`

func (q *Queries) ListPokemons(ctx context.Context, trainerID int32) ([]Pokemon, error) {
	rows, err := q.db.QueryContext(ctx, listPokemons, trainerID)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	items := []Pokemon{}
	for rows.Next() {
		var i Pokemon
		if err := rows.Scan(
			&i.ID,
			&i.TrainerID,
			&i.Species,
			&i.Nickname,
			&i.CreatedAt,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}
